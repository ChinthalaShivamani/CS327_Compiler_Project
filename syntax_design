# Lumos Language Syntax Design

This document defines the syntax of the **Lumos** programming language, including keywords, operators, grammar rules, and data types.

---

## Keywords
These are reserved words in Lumos that have specific meanings and cannot be used as identifiers (variable names, function names, etc.):

- `if`
- `else`
- `while`
- `for`
- `function`
- `return`
- `int`
- `float`
- `string`
- `bool`
- `true`
- `false`
- `struct`
- `array`
- `print`

---

## Operators
These symbols are used to perform operations on variables and values:

- **Arithmetic Operators**: `+`, `-`, `*`, `/`, `%`
- **Relational Operators**: `==`, `!=`, `<`, `>`, `<=`, `>=`
- **Logical Operators**: `&&` (and), `||` (or), `!` (not)
- **Assignment Operators**: `=`, `+=`, `-=`, `*=`, `/=`
- **Increment/Decrement**: `++`, `--`

---

## Grammar Rules
The grammar defines the structure of statements, expressions, and functions in Lumos. Below is a simplified version of the grammar using **BNF** (Backus-Naur Form).

### Statements

```bnf
<statement> ::= <declaration>
            | <assignment>
            | <if_statement>
            | <while_statement>
            | <for_statement>
            | <function_call>
            | <return_statement>
            | <print_statement>

<declaration> ::= <type> <identifier> "=" <expression>;

<assignment> ::= <identifier> "=" <expression>;

<if_statement> ::= "if" "(" <expression> ")" "{" <statement> "}" [ "else" "{" <statement> "}" ];

<while_statement> ::= "while" "(" <expression> ")" "{" <statement> "}";
            
<for_statement> ::= "for" "(" <declaration> ";" <expression> ";" <assignment> ")" "{" <statement> "}";

<function_call> ::= <identifier> "(" [ <arguments> ] ")";

<return_statement> ::= "return" <expression>;

<print_statement> ::= "print" "(" <expression> ")";

